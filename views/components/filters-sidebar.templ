package components

import "fmt"

type FiltersSidebarProps struct {
	Categories []struct {
		ID    string
		Name  string
		Count int
	}
	Tags []struct {
		ID    string
		Name  string
		Count int
	}
}

templ FiltersSidebar(props FiltersSidebarProps) {
	<div
		x-data="{
			selectedCategories: [],
			selectedTags: [],
			sortBy: 'newest',
			tagSearch: '',
			isOpen: false,
			toggleCategory(id) {
				const idx = this.selectedCategories.indexOf(id)
				if (idx === -1) {
					this.selectedCategories.push(id)
				} else {
					this.selectedCategories.splice(idx, 1)
				}
				this.applyFilters()
			},
			toggleTag(id) {
				const idx = this.selectedTags.indexOf(id)
				if (idx === -1) {
					this.selectedTags.push(id)
				} else {
					this.selectedTags.splice(idx, 1)
				}
				this.applyFilters()
			},
			changeSortBy(value) {
				this.sortBy = value
				this.applyFilters()
			},
			applyFilters() {
				const params = new URLSearchParams()
				if (this.selectedCategories.length > 0) {
					params.set('categories', this.selectedCategories.join(','))
				}
				if (this.selectedTags.length > 0) {
					params.set('tags', this.selectedTags.join(','))
				}
				params.set('sort', this.sortBy)
				htmx.ajax('GET', '/api/roadmaps?' + params.toString(), {
					target: '#roadmaps-grid',
					swap: 'innerHTML'
				})
			},
			clearFilters() {
				this.selectedCategories = []
				this.selectedTags = []
				this.sortBy = 'newest'
				this.tagSearch = ''
				this.applyFilters()
			}
		}"
		class="w-full lg:w-64 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg"
	>
		// Botón móvil para mostrar/ocultar filtros
		<button
			@click="isOpen = !isOpen"
			class="lg:hidden w-full flex items-center justify-between p-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg mb-4"
		>
			<span class="font-medium">Filtros</span>
			<svg
				class="w-5 h-5 transition-transform"
				:class="{ 'rotate-180': isOpen }"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
			>
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
			</svg>
		</button>

		<div
			class="space-y-6"
			:class="{ 'hidden lg:block': !isOpen }"
		>
			// Ordenamiento
			<div>
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Ordenar por</h3>
				<div class="space-y-2">
					<label class="flex items-center">
						<input
							type="radio"
							name="sort"
							value="newest"
							x-model="sortBy"
							@change="changeSortBy($el.value)"
							class="form-radio text-blue-600"
						/>
						<span class="ml-2 text-gray-700 dark:text-gray-300">Más recientes</span>
					</label>
					<label class="flex items-center">
						<input
							type="radio"
							name="sort"
							value="popular"
							x-model="sortBy"
							@change="changeSortBy($el.value)"
							class="form-radio text-blue-600"
						/>
						<span class="ml-2 text-gray-700 dark:text-gray-300">Más populares</span>
					</label>
					<label class="flex items-center">
						<input
							type="radio"
							name="sort"
							value="rating"
							x-model="sortBy"
							@change="changeSortBy($el.value)"
							class="form-radio text-blue-600"
						/>
						<span class="ml-2 text-gray-700 dark:text-gray-300">Mejor valorados</span>
					</label>
				</div>
			</div>

			// Categorías
			<div>
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Categorías</h3>
				<div class="space-y-2">
					for _, category := range props.Categories {
						<label class="flex items-center justify-between group">
							<div class="flex items-center">
								<input
									type="checkbox"
									value={ category.ID }
									x-model="selectedCategories"
									@change="toggleCategory($el.value)"
									class="form-checkbox text-blue-600 rounded"
								/>
								<span class="ml-2 text-gray-700 dark:text-gray-300">{ category.Name }</span>
							</div>
							<span class="text-sm text-gray-500 dark:text-gray-400">{ fmt.Sprint(category.Count) }</span>
						</label>
					}
				</div>
			</div>

			// Tags
			<div>
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Tags</h3>
				<div class="relative mb-3">
					<input
						type="text"
						x-model="tagSearch"
						placeholder="Buscar tags..."
						class="w-full px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
					/>
					<svg
						class="absolute right-3 top-2.5 w-5 h-5 text-gray-400"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24"
					>
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
				</div>
				<div class="space-y-2 max-h-48 overflow-y-auto">
					for _, tag := range props.Tags {
						<template x-if="!tagSearch || '{ tag.Name }'.toLowerCase().includes(tagSearch.toLowerCase())">
							<label class="flex items-center justify-between group">
								<div class="flex items-center">
									<input
										type="checkbox"
										value={ tag.ID }
										x-model="selectedTags"
										@change="toggleTag($el.value)"
										class="form-checkbox text-blue-600 rounded"
									/>
									<span class="ml-2 text-gray-700 dark:text-gray-300">{ tag.Name }</span>
								</div>
								<span class="text-sm text-gray-500 dark:text-gray-400">{ fmt.Sprint(tag.Count) }</span>
							</label>
						</template>
					}
				</div>
			</div>

			// Botón para limpiar filtros
			<button
				@click="clearFilters"
				class="w-full px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200"
			>
				Limpiar filtros
			</button>
		</div>
	</div>
}